        -:    0:Source:/home/user/projects/cpp/algo_lections/lesson_1_sort.cpp
        -:    0:Graph:/home/user/projects/cpp/algo_lections/cmake-build-debug-coverage/CMakeFiles/algo_lections.dir/lesson_1_sort.cpp.gcno
        -:    0:Data:/home/user/projects/cpp/algo_lections/cmake-build-debug-coverage/CMakeFiles/algo_lections.dir/lesson_1_sort.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by user on 04.11.2021.
        -:    3://
        -:    4:
        -:    5:#include <cstdlib>
        -:    6:
function _Z4swapRiS_ called 0 returned 0% blocks executed 0%
    #####:    7:void swap(int& a, int& b){
    #####:    8:    int tmp = a;
    #####:    9:    a = b;
    #####:   10:    b = tmp;
    #####:   11:}
        -:   12:
function _Z13selectionSortPii called 0 returned 0% blocks executed 0%
    #####:   13:void selectionSort(int* a, int size){
    #####:   14:    for (int i = 0; i < size; i++) {
    %%%%%:   14-block  0
    %%%%%:   14-block  1
branch  0 never executed
branch  1 never executed
    #####:   15:        int max = a[i], max_idx = i;
    #####:   16:        for (int j = i + 1; j < size; j++)
    %%%%%:   16-block  0
    %%%%%:   16-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:   16-block  2
    #####:   17:            if (max < a[j])
    %%%%%:   17-block  0
branch  0 never executed
branch  1 never executed
    #####:   18:                max = a[j], max_idx = j;
    %%%%%:   18-block  0
    #####:   19:        swap(a[i], a[max_idx]);
    %%%%%:   19-block  0
call    0 never executed
        -:   20:    }
    #####:   21:}
        -:   22:
function _Z10bubbleSortPii called 0 returned 0% blocks executed 0%
    #####:   23:void bubbleSort(int* a, int size){
    #####:   24:    for (int i = 0; i < size; i++) {
    %%%%%:   24-block  0
    %%%%%:   24-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:   24-block  2
    #####:   25:        bool fl = true;
    #####:   26:        for (int j = 0; j < size-i-1; j++)
    %%%%%:   26-block  0
    %%%%%:   26-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:   26-block  2
    #####:   27:            if (a[j] < a[j+1])
    %%%%%:   27-block  0
branch  0 never executed
branch  1 never executed
    #####:   28:                swap(a[j], a[j+1]), fl = false;
    %%%%%:   28-block  0
call    0 never executed
    #####:   29:        if (fl) return;
    %%%%%:   29-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   29-block  1
        -:   30:    }
        -:   31:}
        -:   32:
function _Z13insertionSortPii called 0 returned 0% blocks executed 0%
    #####:   33:void insertionSort(int* a, int size){
    #####:   34:    for (int i = 1; i < size; i++) {
    %%%%%:   34-block  0
    %%%%%:   34-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:   34-block  2
    #####:   35:        for (int j = i; j > 0; j--)
    %%%%%:   35-block  0
    %%%%%:   35-block  1
branch  0 never executed
branch  1 never executed
    #####:   36:            if (a[j] > a[j-1])
    %%%%%:   36-block  0
branch  0 never executed
branch  1 never executed
    #####:   37:                swap(a[j], a[j-1]);
    %%%%%:   37-block  0
call    0 never executed
        -:   38:            else
    #####:   39:                break;
    %%%%%:   39-block  0
        -:   40:    }
    #####:   41:}
        -:   42:
        -:   43:
function _Z6_mergePiS_S_ii called 9 returned 100% blocks executed 100%
        9:   44:void _merge(int* a, int* b, int* res, int size_a, int size_b) {
        9:   45:    int i = 0, j = 0, k = 0;
        9:   45-block  0
       43:   46:    while ((i < size_a) || (j < size_b))
       43:   46-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 30
       13:   46-block  1
branch  2 taken 4 (fallthrough)
branch  3 taken 9
       34:   46-block  2
       34:   47:        if((a[i] >= b[j]) && (i < size_a))
       34:   47-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 16
       18:   47-block  1
branch  2 taken 15 (fallthrough)
branch  3 taken 3
       15:   48:            res[k++] = a[i++];
       15:   48-block  0
        -:   49:        else
       19:   50:            res[k++] = b[j++];
       19:   50-block  0
        9:   51:}
        -:   52:
        -:   53:
function _Z7_msplitPii called 19 returned 100% blocks executed 94%
       19:   54:int* _msplit(int* a, int size){
       19:   55:    if (size == 1){
       19:   55-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 9
       10:   56:        int* res = new int[1];
       10:   56-block  0
call    0 returned 10
       10:   57:        res[0] = a[0];
       10:   58:        return res;
        -:   59:    } else {
        9:   60:        int center = size / 2;
       9*:   61:        int* res = new int[size];
        9:   61-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        9:   61-block  1
    %%%%%:   61-block  2
call    2 never executed
        9:   61-block  3
call    3 returned 9
        9:   62:        int* l = _msplit(a, center);
call    0 returned 9
        9:   63:        int* r = _msplit(&a[center], size - center);
call    0 returned 9
        9:   64:        _merge(l, r, res, center, size-center);
call    0 returned 9
        9:   65:        delete [] l;
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        9:   65-block  0
call    2 returned 9
        9:   66:        delete [] r;
        9:   66-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        9:   66-block  1
call    2 returned 9
        9:   67:        return res;
        9:   67-block  0
        -:   68:    }
        -:   69:}
        -:   70:
        -:   71:
function _Z9mergeSortPii called 1 returned 100% blocks executed 100%
        1:   72:void mergeSort(int* a, int size){
        1:   73:    int* res = _msplit(a, size);
        1:   73-block  0
call    0 returned 1
       11:   74:    for(int i=0; i<size; i++) a[i] = res[i];
       11:   74-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 1
       10:   74-block  1
        1:   75:    delete [] res;
        1:   75-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   75-block  1
call    2 returned 1
        1:   76:}
        -:   77:
        -:   78:
        -:   79:
        -:   80:
        -:   81:
        -:   82:
        -:   83:
        -:   84:
        -:   85:
        -:   86:
        -:   87:
        -:   88:
        -:   89:
        -:   90:
        -:   91:
        -:   92:
        -:   93:
        -:   94:
        -:   95:
        -:   96:
        -:   97:
        -:   98:
        -:   99:
        -:  100:
        -:  101:
        -:  102:
        -:  103:
        -:  104:
        -:  105:
        -:  106:
        -:  107:
        -:  108:
        -:  109:
function _Z10_partitionPiii called 0 returned 0% blocks executed 0%
    #####:  110:int _partition (int* a, int l, int r)
        -:  111:{
    #####:  112:    int p = a[r], i = l - 1;
    #####:  113:    for (int j = l; j <= r - 1; j++)
    %%%%%:  113-block  0
    %%%%%:  113-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:  113-block  2
    #####:  114:        if (a[j] >= p)
    %%%%%:  114-block  0
branch  0 never executed
branch  1 never executed
    #####:  115:            swap(a[++i], a[j]);
    %%%%%:  115-block  0
call    0 never executed
    #####:  116:    swap(a[i+1], a[r]);
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:    return ++i;
        -:  118:}
        -:  119:
        -:  120:
function _Z6_quickPiii called 0 returned 0% blocks executed 0%
    #####:  121:void _quick(int* a, int l, int r)
        -:  122:{
    #####:  123:    if (l < r){
    %%%%%:  123-block  0
branch  0 never executed
branch  1 never executed
    #####:  124:        int pi = _partition(a, l, r);
    %%%%%:  124-block  0
call    0 never executed
    #####:  125:        _quick(a, l, pi - 1);
call    0 never executed
    #####:  126:        _quick(a, pi + 1, r);
call    0 never executed
        -:  127:    }
    #####:  128:}
        -:  129:
function _Z9quickSortPii called 0 returned 0% blocks executed 0%
    #####:  130:void quickSort(int* a, int size){
    #####:  131:    _quick(a, 0, size - 1);
    %%%%%:  131-block  0
call    0 never executed
    #####:  132:}
        -:  133:
        -:  134:
        -:  135:
        -:  136:
function _Z10bucketSortPiiii called 0 returned 0% blocks executed 0%
    #####:  137:void bucketSort(int* a, int size, int num_buckets, int max_elemet){
    #####:  138:    int** buckets = new int*[num_buckets];
    %%%%%:  138-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  138-block  1
    %%%%%:  138-block  2
call    2 never executed
    %%%%%:  138-block  3
call    3 never executed
    #####:  139:    int* idx = new int [num_buckets];
branch  0 never executed
branch  1 never executed
    %%%%%:  139-block  0
    %%%%%:  139-block  1
call    2 never executed
    %%%%%:  139-block  2
call    3 never executed
    #####:  140:    for(int i=0; i < num_buckets; i++){
    %%%%%:  140-block  0
branch  0 never executed
branch  1 never executed
    #####:  141:        buckets[i] = new int [size];
    %%%%%:  141-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  141-block  1
    %%%%%:  141-block  2
call    2 never executed
    %%%%%:  141-block  3
call    3 never executed
    #####:  142:        idx[i] = 0;
        -:  143:    }
        -:  144:
    #####:  145:    int div = (max_elemet + num_buckets) / num_buckets;
    #####:  146:    for (int i=0; i<size; i++){
    %%%%%:  146-block  0
    %%%%%:  146-block  1
branch  0 never executed
branch  1 never executed
    #####:  147:        int b_idx = a[i] / div;
    #####:  148:        buckets[b_idx][idx[b_idx]++] = a[i];
    %%%%%:  148-block  0
        -:  149:    }
        -:  150:
    #####:  151:    for (int i = 0; i < num_buckets; i++)
    %%%%%:  151-block  0
    %%%%%:  151-block  1
branch  0 never executed
branch  1 never executed
    #####:  152:        quickSort(buckets[i], idx[i]);
    %%%%%:  152-block  0
call    0 never executed
        -:  153:
    #####:  154:    int k = 0;
    #####:  155:    for (int i = num_buckets-1; i >= 0; i--)
    %%%%%:  155-block  0
    %%%%%:  155-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:  155-block  2
    #####:  156:        for (int j = 0; j < idx[i]; j++)
    %%%%%:  156-block  0
    %%%%%:  156-block  1
branch  0 never executed
branch  1 never executed
    #####:  157:            a[k++] = buckets[i][j];
    %%%%%:  157-block  0
        -:  158:
    #####:  159:    delete [] idx;
    %%%%%:  159-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  159-block  1
call    2 never executed
    #####:  160:    for(int i=0; i < num_buckets; i++)
    %%%%%:  160-block  0
    %%%%%:  160-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:  160-block  2
    #####:  161:        delete [] buckets[i];
    %%%%%:  161-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  161-block  1
call    2 never executed
    #####:  162:    delete [] buckets;
    %%%%%:  162-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  162-block  1
call    2 never executed
        -:  163:
        -:  164:
    #####:  165:}
        -:  166:
        -:  167:
        -:  168:
function _Z9countSortPiii called 0 returned 0% blocks executed 0%
    #####:  169:void countSort(int* a, int size, int max_elemet){
    #####:  170:    int* elements = new int [max_elemet+1];
    %%%%%:  170-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  170-block  1
    %%%%%:  170-block  2
call    2 never executed
    %%%%%:  170-block  3
call    3 never executed
    #####:  171:    for(int i=0; i < max_elemet; i++){
    %%%%%:  171-block  0
branch  0 never executed
branch  1 never executed
    #####:  172:        elements[i] = 0;
    %%%%%:  172-block  0
        -:  173:    }
        -:  174:
    #####:  175:    for (int i=0; i<size; i++){
    %%%%%:  175-block  0
    %%%%%:  175-block  1
branch  0 never executed
branch  1 never executed
    #####:  176:        elements[a[i]]++;
    %%%%%:  176-block  0
        -:  177:    }
        -:  178:
    #####:  179:    int k =0;
    #####:  180:    for (int i = max_elemet; i >= 0; i--)
    %%%%%:  180-block  0
    %%%%%:  180-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:  180-block  2
    #####:  181:        for(int j= 0; j<elements[i]; j++)
    %%%%%:  181-block  0
    %%%%%:  181-block  1
branch  0 never executed
branch  1 never executed
    #####:  182:            a[k++] = i;
    %%%%%:  182-block  0
        -:  183:
    #####:  184:    delete [] elements;
    %%%%%:  184-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  184-block  1
call    2 never executed
    #####:  185:}
